@{
    ViewData["Title"] = "Tutorial";
}

<div class="d-flex flex-column align-items-center text-center">
    @if(ViewBag.LoginMessage != null)
    {
        <p class="alert alert-success mb-2">@ViewBag.LoginMessage</p>
    }

    <h1 class="display-4">Learn to Move!</h1>
    <p class="lead">Please select a piece to practice.</p>
    <div id="Selections" class="d-flex flex-wrap">
        <div id="PracticePawn" style="background-image: url(/images/05.png);width:100px; height: 100px;" class="practice"></div>
        <div id="PracticeRook" style="background-image: url(/images/02.png);width:100px; height: 100px;" class="practice"></div>
    </div>
    <a id="ResetBoard" href="#" class="btn btn-dark col-2">Reset Board</a>
    <div id="Board" class="d-flex flex-wrap mt-4"></div></div>
@Url.Action("dsfd", new {soemthing= ""});
@section Scripts{
    <script>
        var somestring = "test";
        var another = 5;
        var teststring = "combine somestring:" + somestring + "with snother:" + another;
        console.log(teststring);
        var gameBoard = {};
        var moveset = {};
        function getBoard(){
            $.get("@Url.Action("CreateBoard")",null, function (data) {
                constructBoard(data.board);
            });
        }
        function printResponse(){
            console.log(gameBoard);
        }
        function constructBoard(e){
            gameBoard = e;
            var board = gameBoard;
            for(i=0; i<board.boardSquares.length;i++)
            {
                let file = board.boardSquares[i].location.file;
                let rank = board.boardSquares[i].location.rank;
                let piece = (board.boardSquares[i].currentPiece) ? String("/images/" + board.boardSquares[i].currentPiece.color) : "";
                piece += (board.boardSquares[i].currentPiece) ? String(board.boardSquares[i].currentPiece.type + ".png") : "";

                $("#Board").append("<div id='F"+ file +"R"+ rank +"' class='square color" + board.boardSquares[i].color + "'></div>");
                
                if (piece)
                    $("#F"+ file +"R"+ rank).attr("style", "background-image: url("+piece+");");
            }
        }
        function saveMoves(e){
            moveset = e;
            console.log(moveset);
        }
        function showMoves(id) {
            // get square id from param
            // loop through board squares to match
            // check if occupied
            // send ajax call with piece to server to return moveset
            var location = id.replace(/\D/g,'');

            gameBoard.boardSquares.forEach(s => {
                // console.log(s.location.file == location[0]);
                if(s.location.file == location[0] && s.location.rank == location[1]){
                    console.log("match");
                    if(s.isOccupied){
                        // console.log("occupied", s.currentPiece, location);
                        // $.get("@Url.Action("GetMoves", new {piececolor ="+ s.currentPiece.color +", l = " + location + ", board ="+ gameBoard +"})",null, function (data) {
                        //     console.log(data.moves);
                        // });

                        moveset.forEach(m => {
                            let sid = "#F" + m.file + "R" + m.rank;
                            console.log(m.file, m.rank, sid);
                            $(sid).toggleClass("movable");
                        });
                    }
                }
            });
        }

        $(document).ready(function() {
            var x = false;
            var y = false;
            // generate board
            getBoard();

            $(document).on("click", ".square", function(){
                if($(this).hasClass("selected")){
                    $("#Board > div").removeClass("selected");
                    $("#Board > div").removeClass("movable");
                }else{
                    showMoves($(this).attr("id"));
                    $("#Board > div").removeClass("selected");
                    $(this).toggleClass("selected");
                }
                printResponse();
            });

            $("#PracticePawn").click(function() {
                if($(this).hasClass("selected")){
                    $("#Selections > div").removeClass("selected");
                }else{
                    $("#Selections > div").removeClass("selected");
                    $(this).toggleClass("selected");
                }
                if (!x){
                    $.get("@Url.Action("PracticePawn", new {boardstate ="+ gameBoard +"})",null, function (data) {
                        $("#Board").html("");
                        saveMoves(data.moves);
                        constructBoard(data.board);
                    });
                    x = true;
                } else{
                    $("#Board").html("");
                    getBoard();
                    x = false;
                }
            });

            $("#PracticeRook").click(function() {
                if($(this).hasClass("selected")){
                    $("#Selections > div").removeClass("selected");
                }else{
                    $("#Selections > div").removeClass("selected");
                    $(this).toggleClass("selected");
                }

                if (!y){
                    $.get("@Url.Action("PracticeRook", new {boardstate ="+ gameBoard +"})",null, function (data) {
                        $("#Board").html("");
                        saveMoves(data.moves);
                        constructBoard(data.board);
                    });
                    y = true;
                } else{
                    $("#Board").html("");
                    getBoard();
                    y = false;
                }
            });

            $(document).on( "click", "#ResetBoard", function() {
                $("#Board").html("");
                getBoard();
            });
        });
    </script>
}